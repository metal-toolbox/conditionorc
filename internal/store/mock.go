// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/interface.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	model "github.com/metal-toolbox/conditionorc/internal/model"
	condition "github.com/metal-toolbox/rivets/condition"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, serverID uuid.UUID, condition *condition.Condition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, serverID, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, serverID, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, serverID, condition)
}

// Delete mocks base method.
func (m *MockRepository) Delete(ctx context.Context, serverID uuid.UUID, conditionKind condition.Kind) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, serverID, conditionKind)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockRepositoryMockRecorder) Delete(ctx, serverID, conditionKind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockRepository)(nil).Delete), ctx, serverID, conditionKind)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, serverID uuid.UUID, conditionKind condition.Kind) (*condition.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, serverID, conditionKind)
	ret0, _ := ret[0].(*condition.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, serverID, conditionKind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, serverID, conditionKind)
}

// GetServer mocks base method.
func (m *MockRepository) GetServer(ctx context.Context, serverID uuid.UUID) (*model.Server, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServer", ctx, serverID)
	ret0, _ := ret[0].(*model.Server)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServer indicates an expected call of GetServer.
func (mr *MockRepositoryMockRecorder) GetServer(ctx, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServer", reflect.TypeOf((*MockRepository)(nil).GetServer), ctx, serverID)
}

// List mocks base method.
func (m *MockRepository) List(ctx context.Context, serverID uuid.UUID, conditionState condition.State) ([]*condition.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx, serverID, conditionState)
	ret0, _ := ret[0].([]*condition.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockRepositoryMockRecorder) List(ctx, serverID, conditionState interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockRepository)(nil).List), ctx, serverID, conditionState)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, serverID uuid.UUID, condition *condition.Condition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, serverID, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, serverID, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, serverID, condition)
}
