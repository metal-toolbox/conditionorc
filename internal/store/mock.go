// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/interface.go

// Package store is a generated GoMock package.
package store

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	condition "github.com/metal-toolbox/rivets/condition"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockRepository) Create(ctx context.Context, serverID uuid.UUID, condition *condition.Condition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, serverID, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockRepositoryMockRecorder) Create(ctx, serverID, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepository)(nil).Create), ctx, serverID, condition)
}

// CreateMultiple mocks base method.
func (m *MockRepository) CreateMultiple(ctx context.Context, serverID uuid.UUID, conditions ...*condition.Condition) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, serverID}
	for _, a := range conditions {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateMultiple", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMultiple indicates an expected call of CreateMultiple.
func (mr *MockRepositoryMockRecorder) CreateMultiple(ctx, serverID interface{}, conditions ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, serverID}, conditions...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMultiple", reflect.TypeOf((*MockRepository)(nil).CreateMultiple), varargs...)
}

// Get mocks base method.
func (m *MockRepository) Get(ctx context.Context, serverID uuid.UUID, conditionKind condition.Kind) (*condition.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, serverID, conditionKind)
	ret0, _ := ret[0].(*condition.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockRepositoryMockRecorder) Get(ctx, serverID, conditionKind interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockRepository)(nil).Get), ctx, serverID, conditionKind)
}

// GetActiveCondition mocks base method.
func (m *MockRepository) GetActiveCondition(ctx context.Context, serverID uuid.UUID) (*condition.Condition, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveCondition", ctx, serverID)
	ret0, _ := ret[0].(*condition.Condition)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActiveCondition indicates an expected call of GetActiveCondition.
func (mr *MockRepositoryMockRecorder) GetActiveCondition(ctx, serverID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveCondition", reflect.TypeOf((*MockRepository)(nil).GetActiveCondition), ctx, serverID)
}

// Update mocks base method.
func (m *MockRepository) Update(ctx context.Context, serverID uuid.UUID, condition *condition.Condition) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, serverID, condition)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockRepositoryMockRecorder) Update(ctx, serverID, condition interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepository)(nil).Update), ctx, serverID, condition)
}
