// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/servers/{uuid}/condition/{conditionKind}": {
            "get": {
                "description": "Returns condition of a server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Condition Get",
                "operationId": "serverConditionGet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition Kind",
                        "name": "conditionKind",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ServerResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates a condition on a server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Condition Update",
                "operationId": "serverConditionUpdate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition Kind",
                        "name": "conditionKind",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ServerResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Deletes a condition on a server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Condition Create",
                "operationId": "serverConditionCreate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition Kind",
                        "name": "conditionKind",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ServerResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes a condition on a server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Condition Delete",
                "operationId": "serverConditionDelete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition Kind",
                        "name": "conditionKind",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ServerResponse"
                        }
                    }
                }
            }
        },
        "/servers/{uuid}/state/{conditionState}": {
            "get": {
                "description": "Returns all conditions set on a server by the condition state.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Condition List",
                "operationId": "serverConditionList",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Server ID",
                        "name": "uuid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Condition State",
                        "name": "conditionState",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/types.ServerResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "types.Condition": {
            "type": "object",
            "properties": {
                "createdAt": {
                    "description": "CreatedAt is when this object was created.",
                    "type": "string"
                },
                "exclusive": {
                    "description": "Exclusive indicates this condition holds exclusive access to the device\nand other conditions have to wait until this is in a finalized state.",
                    "type": "boolean"
                },
                "failOnCheckpointError": {
                    "description": "Should the worker executing this condition fail if its unable to checkpoint\nthe status of work on this condition.",
                    "type": "boolean"
                },
                "fault": {
                    "description": "Fault is used to introduce faults into the controller when executing on a condition.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.Fault"
                        }
                    ]
                },
                "id": {
                    "description": "ID is the identifier for this condition.",
                    "type": "string"
                },
                "kind": {
                    "description": "Kind is one of ConditionKind.",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ConditionKind"
                        }
                    ]
                },
                "parameters": {
                    "description": "Parameters is a JSON object that is agreed upon by the controller\nreconciling the condition and the client requesting the condition.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "resourceVersion": {
                    "description": "ResourceVersion has to be set to the value received by the\nclient updating it, this it to make sure condition updates\noccur in the expected order.",
                    "type": "integer"
                },
                "state": {
                    "description": "State is one of ConditionState",
                    "allOf": [
                        {
                            "$ref": "#/definitions/types.ConditionState"
                        }
                    ]
                },
                "status": {
                    "description": "Status is a JSON object that is agreed upon by the controller\nreconciling the condition and the client requesting the condition.",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "updatedAt": {
                    "description": "UpdatedAt is when this object was last updated.",
                    "type": "string"
                },
                "version": {
                    "description": "Version identifies the revision number for this struct.",
                    "type": "string"
                }
            }
        },
        "types.ConditionKind": {
            "type": "string",
            "enum": [
                "firmwareInstall",
                "inventoryOutofband"
            ],
            "x-enum-varnames": [
                "FirmwareInstall",
                "InventoryOutofband"
            ]
        },
        "types.ConditionState": {
            "type": "string",
            "enum": [
                "pending",
                "active",
                "failed",
                "succeeded"
            ],
            "x-enum-varnames": [
                "Pending",
                "Active",
                "Failed",
                "Succeeded"
            ]
        },
        "types.ConditionsResponse": {
            "type": "object",
            "properties": {
                "conditions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/types.Condition"
                    }
                },
                "serverID": {
                    "type": "string"
                }
            }
        },
        "types.Fault": {
            "type": "object",
            "properties": {
                "delayDuration": {
                    "description": "Introduce specified delay in execution of the condition on the controller.\n\naccepts the string format of time.Duration - 5s, 5m, 5h",
                    "type": "string"
                },
                "failAt": {
                    "description": "FailAt is a controller specific task/stage that the condition should fail in execution.\n\nfor example, in the flasher controller, setting this field to ` + "`" + `init` + "`" + ` will cause the\ncondition task to fail at initialization.",
                    "type": "string"
                },
                "panic": {
                    "description": "will cause the condition execution to panic on the controller.",
                    "type": "boolean"
                }
            }
        },
        "types.ServerResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "records": {
                    "$ref": "#/definitions/types.ConditionsResponse"
                },
                "statusCode": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Condition orchestrator API",
	Description:      "Conditions API expose CRUD actions to condition objects on servers",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
