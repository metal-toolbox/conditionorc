// Code generated by mockery v2.42.1. DO NOT EDIT.

package routes

import (
	condition "github.com/metal-toolbox/rivets/condition"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockstatusValueKV is an autogenerated mock type for the statusValueKV type
type MockstatusValueKV struct {
	mock.Mock
}

type MockstatusValueKV_Expecter struct {
	mock *mock.Mock
}

func (_m *MockstatusValueKV) EXPECT() *MockstatusValueKV_Expecter {
	return &MockstatusValueKV_Expecter{mock: &_m.Mock}
}

// publish provides a mock function with given fields: facilityCode, conditionID, serverID, conditionKind, newSV, create, onlyTimestamp
func (_m *MockstatusValueKV) publish(facilityCode string, conditionID uuid.UUID, serverID uuid.UUID, conditionKind condition.Kind, newSV *condition.StatusValue, create bool, onlyTimestamp bool) error {
	ret := _m.Called(facilityCode, conditionID, serverID, conditionKind, newSV, create, onlyTimestamp)

	if len(ret) == 0 {
		panic("no return value specified for publish")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uuid.UUID, uuid.UUID, condition.Kind, *condition.StatusValue, bool, bool) error); ok {
		r0 = rf(facilityCode, conditionID, serverID, conditionKind, newSV, create, onlyTimestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockstatusValueKV_publish_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'publish'
type MockstatusValueKV_publish_Call struct {
	*mock.Call
}

// publish is a helper method to define mock.On call
//   - facilityCode string
//   - conditionID uuid.UUID
//   - serverID uuid.UUID
//   - conditionKind condition.Kind
//   - newSV *condition.StatusValue
//   - create bool
//   - onlyTimestamp bool
func (_e *MockstatusValueKV_Expecter) publish(facilityCode interface{}, conditionID interface{}, serverID interface{}, conditionKind interface{}, newSV interface{}, create interface{}, onlyTimestamp interface{}) *MockstatusValueKV_publish_Call {
	return &MockstatusValueKV_publish_Call{Call: _e.mock.On("publish", facilityCode, conditionID, serverID, conditionKind, newSV, create, onlyTimestamp)}
}

func (_c *MockstatusValueKV_publish_Call) Run(run func(facilityCode string, conditionID uuid.UUID, serverID uuid.UUID, conditionKind condition.Kind, newSV *condition.StatusValue, create bool, onlyTimestamp bool)) *MockstatusValueKV_publish_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(uuid.UUID), args[2].(uuid.UUID), args[3].(condition.Kind), args[4].(*condition.StatusValue), args[5].(bool), args[6].(bool))
	})
	return _c
}

func (_c *MockstatusValueKV_publish_Call) Return(_a0 error) *MockstatusValueKV_publish_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockstatusValueKV_publish_Call) RunAndReturn(run func(string, uuid.UUID, uuid.UUID, condition.Kind, *condition.StatusValue, bool, bool) error) *MockstatusValueKV_publish_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockstatusValueKV creates a new instance of MockstatusValueKV. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockstatusValueKV(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockstatusValueKV {
	mock := &MockstatusValueKV{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
