// Code generated by mockery v2.42.1. DO NOT EDIT.

package events

import (
	context "context"

	types "github.com/metal-toolbox/conditionorc/pkg/api/v1/types"
	mock "github.com/stretchr/testify/mock"
)

// MockSetter is an autogenerated mock type for the Setter type
type MockSetter struct {
	mock.Mock
}

type MockSetter_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSetter) EXPECT() *MockSetter_Expecter {
	return &MockSetter_Expecter{mock: &_m.Mock}
}

// UpdateCondition provides a mock function with given fields: ctx, updEvt
func (_m *MockSetter) UpdateCondition(ctx context.Context, updEvt *types.ConditionUpdateEvent) error {
	ret := _m.Called(ctx, updEvt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCondition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *types.ConditionUpdateEvent) error); ok {
		r0 = rf(ctx, updEvt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockSetter_UpdateCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateCondition'
type MockSetter_UpdateCondition_Call struct {
	*mock.Call
}

// UpdateCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - updEvt *types.ConditionUpdateEvent
func (_e *MockSetter_Expecter) UpdateCondition(ctx interface{}, updEvt interface{}) *MockSetter_UpdateCondition_Call {
	return &MockSetter_UpdateCondition_Call{Call: _e.mock.On("UpdateCondition", ctx, updEvt)}
}

func (_c *MockSetter_UpdateCondition_Call) Run(run func(ctx context.Context, updEvt *types.ConditionUpdateEvent)) *MockSetter_UpdateCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*types.ConditionUpdateEvent))
	})
	return _c
}

func (_c *MockSetter_UpdateCondition_Call) Return(_a0 error) *MockSetter_UpdateCondition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockSetter_UpdateCondition_Call) RunAndReturn(run func(context.Context, *types.ConditionUpdateEvent) error) *MockSetter_UpdateCondition_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockSetter creates a new instance of MockSetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSetter {
	mock := &MockSetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
