basePath: /api/v1
definitions:
  condition.Condition:
    properties:
      client:
        description: Client is the user/jwt user that requested the condition.
        type: string
      createdAt:
        description: CreatedAt is when this object was created.
        type: string
      exclusive:
        description: |-
          Exclusive indicates this condition holds exclusive access to the device
          and other conditions have to wait until this is in a finalized state.
        type: boolean
      failOnCheckpointError:
        description: |-
          Should the worker executing this condition fail if its unable to checkpoint
          the status of work on this condition.
        type: boolean
      fault:
        allOf:
        - $ref: '#/definitions/condition.Fault'
        description: Fault is used to introduce faults into the controller when executing
          on a condition.
      id:
        description: ID is the identifier for this condition.
        type: string
      kind:
        allOf:
        - $ref: '#/definitions/condition.Kind'
        description: Kind is one of Kind.
      parameters:
        description: |-
          Parameters is a JSON object that is agreed upon by the controller
          reconciling the condition and the client requesting the condition.
        items:
          type: integer
        type: array
      state:
        allOf:
        - $ref: '#/definitions/condition.State'
        description: State is one of State
      status:
        description: |-
          Status is a JSON object that is agreed upon by the controller
          reconciling the condition and the client requesting the condition.
        items:
          type: integer
        type: array
      updatedAt:
        description: UpdatedAt is when this object was last updated.
        type: string
      version:
        description: Version identifies the revision number for this struct.
        type: string
    type: object
  condition.Fault:
    properties:
      delayDuration:
        description: |-
          Introduce specified delay in execution of the condition on the controller.

          accepts the string format of time.Duration - 5s, 5m, 5h
        type: string
      failAt:
        description: |-
          FailAt is a controller specific task/stage that the condition should fail in execution.

          for example, in the flasher controller, setting this field to `init` will cause the
          condition task to fail at initialization.
        type: string
      panic:
        description: will cause the condition execution to panic on the controller.
        type: boolean
    type: object
  condition.Firmware:
    properties:
      URL:
        type: string
      checksum:
        type: string
      component:
        type: string
      filename:
        type: string
      id:
        type: string
      models:
        items:
          type: string
        type: array
      vendor:
        type: string
      version:
        type: string
    type: object
  condition.FirmwareInstallTaskParameters:
    properties:
      asset_id:
        description: Inventory identifier for the asset to install firmware on.
        type: string
      dry_run:
        description: |-
          When defined, flasher will not perform any disruptive actions on the asset,
          it will download the firmware to be installed and determine if the firmware is applicable for the device.

          No firmware installs will be attempted and if the device is powered off, it will not be powered on.
        type: boolean
      firmware_set_id:
        description: FirmwareSetID specifies the firmware set to be applied.
        type: string
      firmwares:
        description: Firmwares is the list of firmwares to be installed.
        items:
          $ref: '#/definitions/condition.Firmware'
        type: array
      force_install:
        description: Force install given firmware regardless of current firmware version.
        type: boolean
      require_host_powered_off:
        description: |-
          When true, flasher will expect the host to be powered off before proceeding,
          if the host is not already powered off - the install task will be failed.
        type: boolean
      reset_bmc_before_install:
        description: Reset device BMC before firmware install
        type: boolean
    type: object
  condition.Kind:
    enum:
    - inventory
    - virtualMediaMount
    - firmwareInstall
    type: string
    x-enum-varnames:
    - Inventory
    - VirtualMediaMount
    - FirmwareInstall
  condition.State:
    enum:
    - pending
    - active
    - failed
    - succeeded
    type: string
    x-enum-varnames:
    - Pending
    - Active
    - Failed
    - Succeeded
  types.ConditionsResponse:
    properties:
      conditions:
        items:
          $ref: '#/definitions/condition.Condition'
        type: array
      serverID:
        type: string
      state:
        $ref: '#/definitions/condition.State'
    type: object
  types.ServerResponse:
    properties:
      message:
        type: string
      records:
        $ref: '#/definitions/types.ConditionsResponse'
      statusCode:
        type: integer
    type: object
info:
  contact: {}
  description: Conditions API expose CRUD actions to condition objects on servers
  title: Condition orchestrator API
paths:
  /serverEnroll/{uuid}:
    post:
      consumes:
      - application/json
      description: |-
        Creates a server record in FleetDB and schedules an inventory condition on the device.
        It will create a new server ID if UUID is not provided.
        Sample server enroll request and response: https://github.com/metal-toolbox/conditionorc/blob/main/sample/serverenroll.md
      parameters:
      - description: Server ID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ServerResponse'
      summary: Server Enroll
  /servers/{uuid}:
    delete:
      description: |-
        Delete a server from FleetDB
        Sample server delete request and response: https://github.com/metal-toolbox/conditionorc/blob/main/sample/serverenroll.md
      parameters:
      - description: Server ID
        in: path
        name: uuid
        required: true
        type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ServerResponse'
      summary: Server Delete
  /servers/{uuid}/condition/{conditionKind}:
    post:
      consumes:
      - application/json
      description: |-
        Creates a condition on a server
        Sample firmwareInstall payload, response: https://github.com/metal-toolbox/conditionorc/blob/main/sample/firmwareInstall.md
      parameters:
      - description: Server ID
        in: path
        name: uuid
        required: true
        type: string
      - description: Condition Kind
        in: path
        name: conditionKind
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ServerResponse'
      summary: Condition Create
  /servers/{uuid}/firmwareInstall:
    post:
      consumes:
      - application/json
      description: |-
        Installs firmware on a device and validates with a subsequent inventory
        Sample firmwareInstall payload, response: https://github.com/metal-toolbox/conditionorc/blob/main/sample/firmwareInstall.md
      parameters:
      - description: Server ID
        in: path
        name: uuid
        required: true
        type: string
      - description: firmware install options
        in: body
        name: data
        required: true
        schema:
          $ref: '#/definitions/condition.FirmwareInstallTaskParameters'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ServerResponse'
      summary: Firmware Install
  /servers/{uuid}/status:
    get:
      consumes:
      - application/json
      description: Returns condition of a server
      operationId: conditionStatus
      parameters:
      - description: Server ID
        in: path
        name: uuid
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/types.ServerResponse'
      summary: Condition Status
swagger: "2.0"
