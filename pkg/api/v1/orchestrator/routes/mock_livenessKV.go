// Code generated by mockery v2.42.1. DO NOT EDIT.

package routes

import (
	registry "github.com/metal-toolbox/rivets/events/registry"
	mock "github.com/stretchr/testify/mock"
)

// MocklivenessKV is an autogenerated mock type for the livenessKV type
type MocklivenessKV struct {
	mock.Mock
}

type MocklivenessKV_Expecter struct {
	mock *mock.Mock
}

func (_m *MocklivenessKV) EXPECT() *MocklivenessKV_Expecter {
	return &MocklivenessKV_Expecter{mock: &_m.Mock}
}

// checkin provides a mock function with given fields: id
func (_m *MocklivenessKV) checkin(id registry.ControllerID) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for checkin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(registry.ControllerID) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MocklivenessKV_checkin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'checkin'
type MocklivenessKV_checkin_Call struct {
	*mock.Call
}

// checkin is a helper method to define mock.On call
//   - id registry.ControllerID
func (_e *MocklivenessKV_Expecter) checkin(id interface{}) *MocklivenessKV_checkin_Call {
	return &MocklivenessKV_checkin_Call{Call: _e.mock.On("checkin", id)}
}

func (_c *MocklivenessKV_checkin_Call) Run(run func(id registry.ControllerID)) *MocklivenessKV_checkin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(registry.ControllerID))
	})
	return _c
}

func (_c *MocklivenessKV_checkin_Call) Return(_a0 error) *MocklivenessKV_checkin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MocklivenessKV_checkin_Call) RunAndReturn(run func(registry.ControllerID) error) *MocklivenessKV_checkin_Call {
	_c.Call.Return(run)
	return _c
}

// register provides a mock function with given fields: controllerID
func (_m *MocklivenessKV) register(controllerID string) (registry.ControllerID, error) {
	ret := _m.Called(controllerID)

	if len(ret) == 0 {
		panic("no return value specified for register")
	}

	var r0 registry.ControllerID
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (registry.ControllerID, error)); ok {
		return rf(controllerID)
	}
	if rf, ok := ret.Get(0).(func(string) registry.ControllerID); ok {
		r0 = rf(controllerID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(registry.ControllerID)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(controllerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MocklivenessKV_register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'register'
type MocklivenessKV_register_Call struct {
	*mock.Call
}

// register is a helper method to define mock.On call
//   - controllerID string
func (_e *MocklivenessKV_Expecter) register(controllerID interface{}) *MocklivenessKV_register_Call {
	return &MocklivenessKV_register_Call{Call: _e.mock.On("register", controllerID)}
}

func (_c *MocklivenessKV_register_Call) Run(run func(controllerID string)) *MocklivenessKV_register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MocklivenessKV_register_Call) Return(_a0 registry.ControllerID, _a1 error) *MocklivenessKV_register_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MocklivenessKV_register_Call) RunAndReturn(run func(string) (registry.ControllerID, error)) *MocklivenessKV_register_Call {
	_c.Call.Return(run)
	return _c
}

// NewMocklivenessKV creates a new instance of MocklivenessKV. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMocklivenessKV(t interface {
	mock.TestingT
	Cleanup(func())
}) *MocklivenessKV {
	mock := &MocklivenessKV{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
