// Code generated by mockery v2.42.1. DO NOT EDIT.

package store

import (
	context "context"

	condition "github.com/metal-toolbox/rivets/condition"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

type MockRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockRepository) EXPECT() *MockRepository_Expecter {
	return &MockRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, serverID, facilityCode, conditions
func (_m *MockRepository) Create(ctx context.Context, serverID uuid.UUID, facilityCode string, conditions ...*condition.Condition) error {
	_va := make([]interface{}, len(conditions))
	for _i := range conditions {
		_va[_i] = conditions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, serverID, facilityCode)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, ...*condition.Condition) error); ok {
		r0 = rf(ctx, serverID, facilityCode, conditions...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - serverID uuid.UUID
//   - facilityCode string
//   - conditions ...*condition.Condition
func (_e *MockRepository_Expecter) Create(ctx interface{}, serverID interface{}, facilityCode interface{}, conditions ...interface{}) *MockRepository_Create_Call {
	return &MockRepository_Create_Call{Call: _e.mock.On("Create",
		append([]interface{}{ctx, serverID, facilityCode}, conditions...)...)}
}

func (_c *MockRepository_Create_Call) Run(run func(ctx context.Context, serverID uuid.UUID, facilityCode string, conditions ...*condition.Condition)) *MockRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*condition.Condition, len(args)-3)
		for i, a := range args[3:] {
			if a != nil {
				variadicArgs[i] = a.(*condition.Condition)
			}
		}
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(string), variadicArgs...)
	})
	return _c
}

func (_c *MockRepository_Create_Call) Return(_a0 error) *MockRepository_Create_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Create_Call) RunAndReturn(run func(context.Context, uuid.UUID, string, ...*condition.Condition) error) *MockRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, serverID
func (_m *MockRepository) Get(ctx context.Context, serverID uuid.UUID) (*ConditionRecord, error) {
	ret := _m.Called(ctx, serverID)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 *ConditionRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*ConditionRecord, error)); ok {
		return rf(ctx, serverID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *ConditionRecord); ok {
		r0 = rf(ctx, serverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*ConditionRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serverID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - serverID uuid.UUID
func (_e *MockRepository_Expecter) Get(ctx interface{}, serverID interface{}) *MockRepository_Get_Call {
	return &MockRepository_Get_Call{Call: _e.mock.On("Get", ctx, serverID)}
}

func (_c *MockRepository_Get_Call) Run(run func(ctx context.Context, serverID uuid.UUID)) *MockRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_Get_Call) Return(_a0 *ConditionRecord, _a1 error) *MockRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_Get_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*ConditionRecord, error)) *MockRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveCondition provides a mock function with given fields: ctx, serverID
func (_m *MockRepository) GetActiveCondition(ctx context.Context, serverID uuid.UUID) (*condition.Condition, error) {
	ret := _m.Called(ctx, serverID)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveCondition")
	}

	var r0 *condition.Condition
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*condition.Condition, error)); ok {
		return rf(ctx, serverID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *condition.Condition); ok {
		r0 = rf(ctx, serverID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*condition.Condition)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, serverID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_GetActiveCondition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveCondition'
type MockRepository_GetActiveCondition_Call struct {
	*mock.Call
}

// GetActiveCondition is a helper method to define mock.On call
//   - ctx context.Context
//   - serverID uuid.UUID
func (_e *MockRepository_Expecter) GetActiveCondition(ctx interface{}, serverID interface{}) *MockRepository_GetActiveCondition_Call {
	return &MockRepository_GetActiveCondition_Call{Call: _e.mock.On("GetActiveCondition", ctx, serverID)}
}

func (_c *MockRepository_GetActiveCondition_Call) Run(run func(ctx context.Context, serverID uuid.UUID)) *MockRepository_GetActiveCondition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockRepository_GetActiveCondition_Call) Return(_a0 *condition.Condition, _a1 error) *MockRepository_GetActiveCondition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_GetActiveCondition_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*condition.Condition, error)) *MockRepository_GetActiveCondition_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx
func (_m *MockRepository) List(ctx context.Context) ([]*ConditionRecord, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []*ConditionRecord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*ConditionRecord, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*ConditionRecord); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*ConditionRecord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockRepository_Expecter) List(ctx interface{}) *MockRepository_List_Call {
	return &MockRepository_List_Call{Call: _e.mock.On("List", ctx)}
}

func (_c *MockRepository_List_Call) Run(run func(ctx context.Context)) *MockRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockRepository_List_Call) Return(_a0 []*ConditionRecord, _a1 error) *MockRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockRepository_List_Call) RunAndReturn(run func(context.Context) ([]*ConditionRecord, error)) *MockRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, serverID, _a2
func (_m *MockRepository) Update(ctx context.Context, serverID uuid.UUID, _a2 *condition.Condition) error {
	ret := _m.Called(ctx, serverID, _a2)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, *condition.Condition) error); ok {
		r0 = rf(ctx, serverID, _a2)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - serverID uuid.UUID
//   - _a2 *condition.Condition
func (_e *MockRepository_Expecter) Update(ctx interface{}, serverID interface{}, _a2 interface{}) *MockRepository_Update_Call {
	return &MockRepository_Update_Call{Call: _e.mock.On("Update", ctx, serverID, _a2)}
}

func (_c *MockRepository_Update_Call) Run(run func(ctx context.Context, serverID uuid.UUID, _a2 *condition.Condition)) *MockRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(*condition.Condition))
	})
	return _c
}

func (_c *MockRepository_Update_Call) Return(_a0 error) *MockRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockRepository_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID, *condition.Condition) error) *MockRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
